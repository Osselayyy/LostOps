name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      -  main
jobs:
  setup-traefik:
    name: Setup Traefik
    runs-on: ubuntu-latest
    steps:
      - name: Check if Traefik is running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 22
          username: admuser
          key: ${{ secrets.SERVER_HOST_SSH }}
          passphrase: ${{ secrets.SERVER_HOST_SSH_PASSPHRASE }}
          script: |
            if docker ps -q -f name=traefik | grep -q .; then
              echo "Traefik is already running."
            else
              if docker ps -aq -f name=traefik | grep -q .; then
                docker start traefik
              else
                docker run -d \
                  --restart always \
                  --name traefik \
                  -p 80:80 \
                  -p 8082:8082 \
                  -v /var/run/docker.sock:/var/run/docker.sock:ro \
                  traefik:v2.4 \
                  --providers.docker=true \
                  --providers.docker.exposedbydefault=false \
                  --entrypoints.web.address=:80 \
                  --entrypoints.metrics.address=:8082 \
                  --metrics.prometheus=true \
                  --metrics.prometheus.entryPoint=metrics
              fi
            fi
  Build:
    runs-on: ubuntu-latest
    needs: setup-traefik
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t nsaepitechrennes/sample-app-app:${GITHUB_RUN_NUMBER} .
    - name: Login to Docker Hub and Push Docker image
      run: |
        echo "Logging into Docker Hub..."
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        echo "Pushing Docker image..."
        docker push nsaepitechrennes/sample-app-app:${GITHUB_RUN_NUMBER}
        
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    steps:
      - name: SSH into server and run Trivy scan
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 22
          username: admuser
          key: ${{ secrets.SERVER_HOST_SSH }}
          passphrase: ${{ secrets.SERVER_HOST_SSH_PASSPHRASE }}
          script: |
            trivy fs .
  
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Run Trivy vulnerability scanner in repo mode
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'
  
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
  
  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: Build
    if: success() && needs.trivy-scan.outputs.scan-result == 'pass'
    steps:
      - name: SSH into server and deploy
        env:
          DOCKER_TAG: ${{github.run_number}}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: 22
          username: admuser
          key: ${{ secrets.SERVER_HOST_SSH }}
          passphrase: ${{ secrets.SERVER_HOST_SSH_PASSPHRASE }}
          envs: DOCKER_TAG
          script: |
            echo "$DOCKER_TAG"
            docker pull nsaepitechrennes/sample-app-app:$DOCKER_TAG
            docker stop LostOps
            docker rm LostOps
            docker run -d \
              --restart always \
              --name LostOps \
              -p 8081:80 \
              -e APP_DEBUG=true \
              -e APP_ENV=prod \
              -e APP_KEY=${{ secrets.APP_KEY }} \
              -e DB_CONNECTION=mysql \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=3306 \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --label "traefik.enable=true" \
              --label "traefik.http.routers.app.rule=Host('localhost')" \
              nsaepitechrennes/sample-app-app:${DOCKER_TAG}
            docker exec LostOps npm i



          
